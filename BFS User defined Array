#include<bits/stdc++.h>
using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2
#define SIZE 100
#define MAX 6

int intArray[MAX];
int front = 0;
int rear = -1;
int itemCount = 0;

int adj[SIZE][SIZE];
int colour[SIZE];
int parent[SIZE];
int dis[SIZE];


int Front() {
   return intArray[front];
}

bool isEmpty() {
   return itemCount == 0;
}

bool isFull() {
   return itemCount == MAX;
}

void push(int data) {

   if(!isFull()) {
      if(rear == MAX-1) {
         rear = -1;
      }
      intArray[++rear] = data;
      itemCount++;
   }
}

int pop() {
   int data = intArray[front++];

   if(front == MAX) {
      front = 0;
   }
   itemCount--;
   return data;
}

void bfs(int adj[][SIZE],int vertex,int startingNode)
{
    for(int i=0 ; i<vertex ;i++)
    {
        if(i!= startingNode)
        {
            colour[i] = WHITE;
            dis[i] = INT_MIN;
            parent[i] = -1;
        }
    }

    colour[startingNode] = GRAY;
    dis[startingNode] = 0;
    parent[startingNode] = -1;

    push(startingNode);
    printf("BFS is : ");

    while(!isEmpty())
    {
        int u = Front();
        printf("%d ",u);
        pop();

        for(int i=0 ; i<vertex ; i++)
        {
            if(adj[u][i]!=0)
            {
                int v = i;
                if(colour[v] == WHITE)
                {
                    colour[v] = GRAY;
                    dis[v] = dis[u]+1;
                    parent[v] = u;
                    push(v);
                }
            }
        }
        colour[u] = BLACK;
    }
}

void printPath(int startingNode,int endNode)
{
    char path[SIZE];
    int  par = parent[endNode];
    int i = 0;
    path[i++] = endNode+'0';
    path[i++] = ' ';
    while(par != -1)
    {
        path[i++] = par+'0';
        path[i++] = ' ';
        par = parent[par];
    }
    path[i] = '\0';
    strrev(path);
    printf("\nThe path is :");
    printf("%s",path);
}


int main()
{
    int vertex;
    int edge;
    printf("Enter vertex and edge : ");
    scanf("%d %d",&vertex,&edge);

    printf("\nVertex %d",vertex);
    printf("\nEdge %d\n\n",edge);

    int n1,n2;
    for(int i=0 ; i<edge ; i++)
    {
        scanf("%d %d",&n1,&n2);
        adj[n1][n2] = 1;
        adj[n2][n1] = 1;
    }

    for(int i=0 ; i<vertex ; i++)
    {
        for(int j=0 ; j<vertex ; j++)
        {
            printf("%d ",adj[i][j]);
        }
        printf("\n");
    }

    bfs(adj,vertex,0);
    printf("\n");
    printPath(0,vertex);

    return 0;
}


