#include <bits/stdc++.h>
using namespace std;

typedef struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* GetNewNode(int data)
{
    Node* newNode=new Node();
    newNode->data=data;
    newNode->left=newNode->right=NULL;
    return newNode;
}

Node* Insert(Node* root,int data)
{
    if(root==NULL)
        root=GetNewNode(data);
    else if(data<=root->data)
        root->left=Insert(root->left,data);
    else
        root->right=Insert(root->right,data);
    return root;
}

void Preorder(Node *root){
   if (root == NULL)
      return;

   stack<Node*> S;
   S.push(root);

   while (S.empty() == false) {
      Node *P = S.top();
      printf("%d ",P->data);
      S.pop();
      if (P->right)
         S.push(P->right);
      if (P->left)
         S.push(P->left);
   }
}

void Inorder(Node *root){
   if (root == NULL)
      return;

   stack<Node*> S;
   S.push(root);

   while (S.empty() == false) {
      Node *P = S.top();
      S.pop();
      if (P->right)
         S.push(P->right);
      printf("%d ",P->data);
      if (P->left)
         S.push(P->left);
   }
}

void Postorder(Node *root){
   if (root == NULL)
      return;

   stack<Node*> S;
   S.push(root);

   while (S.empty() == false) {
      Node *P = S.top();
      S.pop();
      if (P->right)
         S.push(P->right);
      if (P->left)
         S.push(P->left);
      printf("%d ",P->data);
   }
}

/*bool Search(Node* root,int data)
{
    if(root==NULL)
        return false;
    else if(root->data==data)
        return true;
    else if(data<=root->data)
        return Search(root->left,data);
    else
        return Search(root->right,data);
}*/
/*
void Postorder(Node* node)
{
    if (node == NULL)
        return;

    Postorder(node->left);
    Postorder(node->right);
    printf("%d ",node->data);
}

void Inorder(Node* node)
{
    if (node == NULL)
        return;
    Inorder(node->left);
    printf("%d ",node->data);
    Inorder(node->right);
}

void Preorder(Node* node)
{
    if (node == NULL)
        return;
    printf("%d ",node->data);
    Postorder(node->left);
    Postorder(node->right);
}
*/
int main()
{
    Node* root=NULL;

    printf("Enter number of nodes : \n\n");
    /*int n,x;
    scanf("%d",&n);
    for(int i=0 ; i<n ; i++){
       scanf("%d",&x);
       root = Insert(root,x);
    printf("\n\n");
    }*/


    root = Insert(root,1);
    root = Insert(root,2);
    root = Insert(root,3);
    root = Insert(root,4);
    root = Insert(root,5);


    Postorder(root);
    printf("\n\n");
    Inorder(root);
    printf("\n\n");
    Preorder(root);
    printf("\n\n");

    return 0;
}



















#include <bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node* right;
    Node* left;
};
Node* root;
Node* create(int data)
{
    Node* tempNode=new Node();
    tempNode->data=data;
    tempNode->left=tempNode->right=NULL;
    return tempNode;
}

Node* Insert(Node* root,int data)
{
    if(root==NULL)
        root=create(data);
    else if(data<=root->data)
        root->left=Insert(root->left,data);
    else
        root->right=Insert(root->right,data);
    return root;
}

void printPostorder(Node* node)
{
    if (node==NULL)
        return;
    stack<Node *>s;
    stack<int>st;
    s.push(root);
    while(!s.empty())
    {
        Node* cur=s.top();
        s.pop();
        st.push(cur->data);
        if(cur->left)
            s.push(cur->left);
        if(cur->right)
            s.push(cur->right);
    }
    while(!st.empty())
    {
        printf("%d ",st.top());
        st.pop();
    }
}
void printInorder(Node* node)
{
    if (node==NULL)
        return;
    stack<Node*>s;
    Node *cur=root;
    while (cur!=NULL || !s.empty())
    {
        while(cur!=NULL)
        {
            s.push(cur);
            cur=cur->left;
        }
        cur=s.top();
        s.pop();
        printf("%d ",cur->data);
        cur=cur->right;
    }
}
void printPreorder(Node* node)
{
    if(node==NULL)
        return;
    stack<Node*>s;
    s.push(root);
    while(!s.empty())
    {
        struct Node* temp=s.top();
        s.pop();
        printf("%d ",temp->data);
        if(temp->right)
            s.push(temp->right);
        if(temp->left)
            s.push(temp->left);
    }
}
int main()
{
    root=NULL;
    int i,n,k;
    printf("Enter number of nodes of this BST : ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&k);
        root=Insert(root,k);
    }
    printf ("Post traversal of this BST is: \n");
    printPostorder(root);
    printf ("\nInorder traversal of this BST is : \n");
    printInorder(root);
    printf ("\nPreorder traversal of this BST is: \n");
    printPreorder(root);
}

